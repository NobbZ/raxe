-- vim: set ft=rb:

require "raxe/tools/StringHandle"

class self :: Transpiler

def counter : Array<Int>

def new()
  counter = Array<Int>.new()
end

def tokens() : Array<String>
  return [
    ")", "}", ";",
    "#", "\"",
    "@", "//", "/**", "**/",
    "=", "+", "-", "*", ".", "/", "," , "|", "&", "{", "(", "[", "^", "%", "<", ">", "~",
    "if", "for", "while", "else", "try", "catch",
  ]
end

def transpile(handle : StringHandle)
  while(handle.nextTokenLine())
    skipLines(handle)

    if(handle.is("\n") || handle.is("//"))
      def position = handle.position
      def isComment = handle.is("//")

      handle.nextToken()
      handle.position = position

      if(!handle.isOne([")", "]"]))
        handle.insert(";")
        handle.increment()
      end

      if(isComment)
        handle.next("\n")
      end

      handle.increment("\n")
    else
      handle.increment()
    end
  end

  return handle.content
end

def skipLines(handle : StringHandle)
  while(handle.nextTokenLine())
    if(handle.is("\n") || handle.is("//"))
      def isComment = handle.is("//")
      def position = handle.position
      handle.prevTokenLine()

      if(handle.isOne(["=", ";", "+", "-", "*", ".", "/", "," , "|", "&", "{", "(", "[", "^", "%", "<", ">", "~", "\n", ]) &&
          onlyWhitespace(handle.content, handle.position + 1, position))
        handle.position = position

        if(isComment)
          handle.next("\n")
          handle.increment()
        else
          handle.increment("\n")
        end
      else
        handle.position = position

        if(!isComment)
          position = handle.position
          handle.increment("\n")
          handle.nextToken()

          if(handle.isOne(["=", "+", "-", "*", ".", "/", "," , "|", "&", ")", "]", "^", "%", "<", ">", "~"]) &&
              onlyWhitespace(handle.content, position + 1, handle.position - 1))
            break
          else
            handle.position = position
            break
          end
        else
          break
        end
      end
    elsif(handle.is("\""))
      handle.increment()

      while(handle.nextToken())
        if(handle.is("\"") && (handle.content.charAt(handle.position -1) != "\\" ||
            (handle.content.charAt(handle.position -1) == "\\" && handle.content.charAt(handle.position -2) == "\\")))
          break
        end

        handle.increment()
      end

      handle.increment()
    elsif(handle.is("<"))
      def count = 1
      def position = handle.position
      handle.increment()

      while(safeNextToken(handle))
        if(handle.is(">"))
          count = count - 1
          handle.increment()
        elsif(handle.is("<"))
          count = count + 1
          handle.increment()
        elsif(handle.is(","))
          handle.increment()
        else
          if (count == 1)
            handle.position = position
          end
          break
        end
      end

      handle.increment()
    elsif(handle.is("#"))
      handle.next("\n")
      handle.increment()
    elsif(handle.is("/**"))
      handle.next("**/")
      handle.increment()
    elsif(handle.is("@"))
      handle.next("\n")
      handle.increment()
    elsif(handle.safeis("if") || handle.safeis("while") || handle.safeis("for") || handle.safeis("else") || handle.safeis("try")|| handle.safeis("catch"))
      if(handle.safeis("else"))
        def position = handle.position
        handle.nextToken()

        if(!handle.safeis("if"))
          handle.position = position
        end
      end

      counter.push(0)
      handle.increment()
    elsif(handle.is("{"))
      if(counter.length > 0)
        counter[counter.length - 1] = counter[counter.length - 1] + 1
      end

      handle.increment()
    elsif(handle.is("}"))
      def position = handle.position
      handle.prevTokenLine()
      handle.position = position

      if(!handle.is("\n"))
        handle.insert(";")
        handle.increment()
      end

      handle.nextTokenLine()

      if(counter.length > 0)
        counter[counter.length - 1] = counter[counter.length - 1] - 1

        if(counter[counter.length - 1] == 0)
          counter.pop()
          handle.increment()
          handle.nextTokenLine()
        end
      end

      if(!handle.safeis("else") && !handle.safeis("catch"))
        handle.increment()
      end
    else
      break
    end
  end

  handle.nextTokenLine()
end

def onlyWhitespace(content : String, from : Int, to : Int)
  def sub = content.substr(from, to - from)
  def regex = EReg.new("^\\s*$", "")
  return regex.match(sub)
end

private def safeNextToken(handle : StringHandle) : Bool
  handle.nextToken()

  if (safeCheck(handle, "if") && safeCheck(handle, "for") && safeCheck(handle, "while") &&
      safeCheck(handle, "else")  && safeCheck(handle, "try") && safeCheck(handle, "catch"))
    return true
  else
    handle.increment()
    return safeNextToken(handle)
  end
end

private def safeCheck(handle : StringHandle, content : String) : Bool
  if(handle.is(content))
    return handle.safeis(content)
  end

  return true
end
