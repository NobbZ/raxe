-- vim: set ft=rb:

require "haxe/io/Input"
require "hscript/Parser"
require "hscript/Interp"
require "hscript/Expr"
require "sys/io/File"
require "sys/FileSystem"

class self < Interp

def parser : Parser
def group : RaxeScriptTranspilerGroup

def new()
  super()

  parser = Parser.new()
  group = RaxeScriptTranspilerGroup.new()

  variables.set("require", do(thing : String)
    def path = thing + ".rx"

    if(FileSystem.exists(path))
      return execute(parse(File.getContent(path)))
    end

    path = thing.replace("/", ".")

    def clazz : Dynamic = Type.resolveClass(path)

    if(clazz == null)
      clazz = Type.resolveEnum(path)

      if(clazz == null)
        trace("Failed to resolve type #{thing}")
      end
    end

    return clazz
  end)
end

def parse(s : String) : Expr
  def content = group.transpile(s)
  return parser.parseString(content)
end

override def get(o : Dynamic, f : String ) : Dynamic
  if(o == null)
    #if debug
    trace("Null error when doing get #{f}")
    #end
    error(EInvalidAccess(f))
  end

  return Reflect.getProperty(o,f)
end

override def set( o : Dynamic, f : String, v : Dynamic ) : Dynamic
  if(o == null)
    #if debug
    trace("Null error when doing set #{f}")
    #end
    error(EInvalidAccess(f))
  end

  Reflect.setProperty(o,f,v)
  return v
end
