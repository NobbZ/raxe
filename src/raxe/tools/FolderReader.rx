require "sys/FileSystem"
require "sys/io/File"

---
 * Utility to deal with folders
 * @author Axel Anceau (Peekmo)
---
class self

---
 * Returns an array of all files which are in the given folder and its subfolders
 * @param rootFolder : String Root folder for the search
 * @return Files found
---
def self.getFiles(rootFolder: String) : Array(:String:)
  def files : Array(:String:) = Array(:String:).new()

  if FileSystem.exists(rootFolder) then
    def folders : Array(:String:) = FileSystem.readDirectory(rootFolder)

    for file in folders.iterator() do
      def path : String = rootFolder + "/" + file

      if FileSystem.isDirectory(path) then
        def data : Array(:String:) = getFiles(path)

        for i in data do
          files.push(i)
        end
      else
        files.push(path)
      end
    end
  end

  return files
end

---
 * Creates a file to the given path, with the given content
 * (Creates all directories if they not exists)
 * @param  path     : String Path to the file (each folders separated by '/')
 * @param  ?content : String File's content
---
def self.createFile(path : String, ?content : String) : Void
  def parts : Array(:String:) = path.split("/")
  def fileName : String = parts.pop()

  -- Create all directories necessaries
  createDirectory(parts.join("/"))

  if content == null then
    content = ""
  end

  File.saveContent(path, content)
end

---
 * Creates the given directory (and all path's directories if needed)
 * @param  path : String Path to the given directory
---
def self.createDirectory(path : String) : Void
  def parts : Array(:String:) = path.split("/")
  def done : String = null

  for part in parts.iterator() do
    done = done == null ? part : done + "/" + part

    if !FileSystem.exists(done) then
      FileSystem.createDirectory(done)
    end
  end
end

---
 * Copy all files from source to destination
 * @param  source      : String Source's path
 * @param  destination : String Destination's path
---
def self.copyFileSystem(source : String, destination : String) : Void
  try
    if source.endsWith("/") then
      source = source.substr(0, -1)
    end

    -- If that's a file
    if !FileSystem.isDirectory(source) then
      createFile(destination, File.getContent(source))
    else
      def files : Array<String> = FileSystem.readDirectory(source)

      for file in files.iterator() do
        if FileSystem.isDirectory(source + "/" + file) then
          createDirectory(destination)
        end

        -- Recursive call
        copyFileSystem(source + "/" + file, destination + "/" + file)
      end
    end

  catch ex: String
    throw "Unable to copy " + source + " to " + destination + " : " + ex
  end
end